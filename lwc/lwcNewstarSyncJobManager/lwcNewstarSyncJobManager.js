import { subscribe, unsubscribe, onError} from 'lightning/empApi';
import LwcBaseWidget from 'c/lwcBaseWidget';
import { EventHelper, AuraWrapperActions } from 'c/lwcNewstarSharedServices';
import componentTemplate from './lwcNewstarSyncJobManager.html';
import intiateSync from '@salesforce/apex/NewstarSyncJobController.initiateSync';
import getSyncJobStatuses from '@salesforce/apex/NewstarSyncJobController.getSyncJobsStatuses';
import { track } from 'lwc';

const EVENT_BUS_NOTIFICATION_CHANNEL='/event/Newstar_Notification_Event__e';

const SYNC_JOBS_COLUMNS = [
    {
        label: 'Name',
        fieldName: 'name'
    },
    {
        label: 'Running?',
        fieldName: 'isRunning',
        type: 'boolean'
    },
    {
        label: 'Last Status',
        fieldName: 'statusText'
    }
];


const SYNC_JOBS_COLUMNS_EXPANDED = [
    {
        label: 'Name',
        fieldName: 'name'
    },
    {
        label: 'Type',
        fieldName: 'internalJobTypeText'
    },
    {
        label: 'Running?',
        fieldName: 'isRunning',
        type: 'boolean'
    },
    {
        label: 'Last Status',
        fieldName: 'statusText'
    },
    {
        label: 'Last Compl. Date',
        fieldName: 'lastCompletedDate',
        type: 'date',
        typeAttributes: {
            year: "2-digit",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit"
        }
    },
    {
        label: 'Extended status',
        fieldName: 'extendedStatus'
    }
];


export default class LwcNewstarSyncJobManager extends LwcBaseWidget {

    //title of the toast messages generated by the component
    interopActionCompletedEventMessageTitle = 'NEWSTAR Sync Job';

    //actual template of the component
    actualComponentTemplate = componentTemplate;

    //job status columns
    @track syncJobColumns = [...SYNC_JOBS_COLUMNS];

    @track syncJobColumnsExpanded = [...SYNC_JOBS_COLUMNS_EXPANDED];

    //actual jobs with statuses
    @track syncJobs = [];

    //flag indicating if the expanded view is open
    @track isExpandedViewModalOpen = false;

    //object used to subscribe to the event bus
    eventBusSubscription = {};

    @track isJobStatusGridActionInProgress=false;


    connectedCallback() {

        //subscribe to event bus
        this.subscribeToEventBusEvents();

        this.handleGetSyncJobStatuses()
    }




    //lifecycle hook: disconnected callback
    disconnectedCallback() {

        //unsubscribe from the event bus
        this.unsubscribeFromEventBusEvents();
    }


    handleGetSyncJobStatuses() {

        

        this.resetSyncJobStatuses();

        getSyncJobStatuses()
            .then(result => {
                this.syncJobs = result;

                this.setActionCompleted();
            })
            .catch(error => {
                this.setErrorStateInfo('Error obtaining sync jobs status information.', error);
            });
    }



    handleInitiateSync() {

        EventHelper.triggerActionStartedEvent(this);

        intiateSync()
            .then(result => {
                EventHelper.triggerActionCompletedEvent(this, 'NEWSTAR sync job has been successfully started.');
            })
            .catch(error => {
                EventHelper.triggerActionErrorEvent(this, "NEWSTAR sync job initiation failed.", error);
            });
    }


    resetSyncJobStatuses() {
        this.syncJobs = [];
    }


    handleExpandView() {
        this.openExpandedView();
    }


    handleCloseModal(event) {
        let modalName = event.detail.modalName;

        if (modalName === 'expanded-view') {
            this.closeExpandedView();
        }
    }

    openExpandedView() {
        this.isExpandedViewModalOpen = true;
    }


    closeExpandedView() {
        this.isExpandedViewModalOpen = false;
    }


    //subscribe the event bus events
    subscribeToEventBusEvents() {

        var thisCmp = this;

        //callback invoked whenever a new event message is received
        const messageCallback = function (response) {

            const data = response.data;
            const payload = data.payload;

            
            //if the notification event is targeting the current opportunity
            if(payload.Primary_Object_Id__c==='##SYNCJOBCMP##') {

                //refresh statuses
                thisCmp.handleGetSyncJobStatuses();

            
           }
            


        };

        //subscribe to the event bus events using empApi
        subscribe(EVENT_BUS_NOTIFICATION_CHANNEL, -1, messageCallback)
            .then(response => {

                this.eventBusSubscription = response;

            });
    }


    unsubscribeFromEventBusEvents() {

        //unsubscribe using empApi
        unsubscribe(this.eventBusSubscription,
            response => {
                // Response is true for successful unsubscribe
            });
    }


    registerErrorListener() {

        //trap empApi errors
        onError(error => {
            console.log('Received error from server: ', JSON.stringify(error));
            // Error contains the server-side error
        });
    }


    setJobStatusGridActionInProgress() {
        this.isJobStatusGridActionInProgress=true;
    }

    setJobStatusGridActionCompleted() {
        this.isJobStatusGridActionInProgress=false;
    }


}